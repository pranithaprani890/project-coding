spring.datasource.url=jdbc:postgresql://localhost:5412/postgres
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.username=postgres
spring.datasource.password=

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


spring.sql.init.mode=never
spring.jpa.hibernate.ddl-auto=update

{
    "timestamp": "2025-08-24T13:32:57.754+00:00",
    "status": 404,
    "error": "Not Found",
    "path": "/api/locations/city/Bangalore"
}









1. DemoApplication.java
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

2. NumberController.java
package com.example.demo.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/numbers")
public class NumberController {

    @GetMapping("/{num}")
    public ResponseEntity<String> checkMultipleOfFive(@PathVariable int num) {
        if (num % 5 == 0) {
            return ResponseEntity
                    .status(HttpStatus.OK)
                    .body("Yes, " + num + " is a multiple of 5");
        } else {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body("No, " + num + " is not a multiple of 5");
        }
    }
}


âœ… Run this with mvn spring-boot:run â†’ server will start on http://localhost:8080.

ðŸŸ¡ React Frontend

Letâ€™s make a simple component that lets the user enter a number, calls the API, and displays the result.

CheckNumber.js
import React, { useState } from "react";

export default function CheckNumber() {
  const [num, setNum] = useState("");
  const [message, setMessage] = useState("");
  const [status, setStatus] = useState(null);

  const checkNumber = async () => {
    if (!num) return;
    try {
      const response = await fetch(`http://localhost:8080/api/numbers/${num}`);
      const text = await response.text();
      setMessage(text);
      setStatus(response.status);
    } catch (err) {
      setMessage("Error connecting to server");
      setStatus(null);
    }
  };

  return (
    <div style={{ padding: "20px", fontFamily: "Arial" }}>
      <h2>Check Multiple of 5</h2>
      <input
        type="number"
        value={num}
        onChange={(e) => setNum(e.target.value)}
        placeholder="Enter a number"
      />
      <button onClick={checkNumber} style={{ marginLeft: "10px" }}>
        Check
      </button>
      {message && (
        <p style={{ marginTop: "15px", color: status === 200 ? "green" : "red" }}>
          {message} (HTTP {status})
        </p>
      )}
    </div>
  );
}

Usage in React App

In your App.js:

import React from "react";
import CheckNumber from "./CheckNumber";

function App() {
  return (
    <div>
      <CheckNumber />
    </div>
  );
}


export default App;


















// src/services/numberService.js

const API_URL = "http://localhost:8080/api/numbers";

export async function checkMultipleOfFive(num) {
  try {
    const response = await fetch(`${API_URL}/${num}`);
    const text = await response.text();
    return {
      status: response.status,
      message: text
    };
  } catch (error) {
    return {
      status: null,
      message: "Error connecting to server"
    };
  }
}





// src/CheckNumber.js
import React, { useState } from "react";
import { checkMultipleOfFive } from "./services/numberService";

export default function CheckNumber() {
  const [num, setNum] = useState("");
  const [result, setResult] = useState(null);

  const handleCheck = async () => {
    if (!num) return;
    const res = await checkMultipleOfFive(num);
    setResult(res);
  };

  return (
    <div style={{ padding: "20px", fontFamily: "Arial" }}>
      <h2>Check Multiple of 5</h2>
      <input
        type="number"
        value={num}
        onChange={(e) => setNum(e.target.value)}
        placeholder="Enter a number"
      />
      <button onClick={handleCheck} style={{ marginLeft: "10px" }}>
        Check
      </button>

      {result && (
        <p
          style={{
            marginTop: "15px",
            color: result.status === 200 ? "green" : "red"
          }}
        >
          {result.message} (HTTP {result.status})
        </p>
      )}
    </div>
  );
}




import React from "react";
import CheckNumber from "./CheckNumber";

function App() {
  return <CheckNumber />;
}

export default App;





























1. application.properties
spring.datasource.url=jdbc:postgresql://localhost:5432/locationsdb
spring.datasource.username=postgres
spring.datasource.password=yourpassword
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

2. Location.java
package com.example.demo.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "locations")
public class Location {

    @Id
    private Long pincode;   // Primary key
    private String city;
    private String area;

    public Location() {}

    public Location(Long pincode, String city, String area) {
        this.pincode = pincode;
        this.city = city;
        this.area = area;
    }

    public Long getPincode() { return pincode; }
    public void setPincode(Long pincode) { this.pincode = pincode; }

    public String getCity() { return city; }
    public void setCity(String city) { this.city = city; }

    public String getArea() { return area; }
    public void setArea(String area) { this.area = area; }
}

3. LocationRepository.java
package com.example.demo.repository;

import com.example.demo.entity.Location;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface LocationRepository extends JpaRepository<Location, Long> {
    List<Location> findByCityIgnoreCase(String city);
}

4. LocationService.java
package com.example.demo.service;

import com.example.demo.entity.Location;
import com.example.demo.repository.LocationRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class LocationService {

    private final LocationRepository repo;

    public LocationService(LocationRepository repo) {
        this.repo = repo;
    }

    public Optional<Location> getLocationByPincode(Long pincode) {
        return repo.findById(pincode);
    }

    public List<Location> getPincodesByCity(String city) {
        return repo.findByCityIgnoreCase(city);
    }
}

5. LocationController.java
package com.example.demo.controller;

import com.example.demo.entity.Location;
import com.example.demo.service.LocationService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/locations")
@CrossOrigin(origins = "http://localhost:3000")
public class LocationController {

    private final LocationService service;

    public LocationController(LocationService service) {
        this.service = service;
    }

    // Get info about city, area, pincode by specifying pincode
    @GetMapping("/pincode/{pincode}")
    public ResponseEntity<?> getLocationByPincode(@PathVariable Long pincode) {
        return service.getLocationByPincode(pincode)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    // Get all pincodes associated with a city
    @GetMapping("/city/{city}")
    public ResponseEntity<List<Location>> getPincodesByCity(@PathVariable String city) {
        return ResponseEntity.ok(service.getPincodesByCity(city));
    }
}

ðŸŸ¡ React Frontend
Project Structure
react-location/
 â””â”€â”€ src/
     â”œâ”€â”€ services/locationService.js
     â”œâ”€â”€ LocationSearch.js
     â”œâ”€â”€ App.js
     â””â”€â”€ index.js

1. locationService.js
const API_URL = "http://localhost:8080/api/locations";

export async function getLocationByPincode(pincode) {
  const res = await fetch(`${API_URL}/pincode/${pincode}`);
  if (!res.ok) throw new Error("Pincode not found");
  return res.json();
}

export async function getPincodesByCity(city) {
  const res = await fetch(`${API_URL}/city/${city}`);
  if (!res.ok) throw new Error("City not found");
  return res.json();
}

2. LocationSearch.js
import React, { useState } from "react";
import { getLocationByPincode, getPincodesByCity } from "./services/locationService";

export default function LocationSearch() {
  const [pincode, setPincode] = useState("");
  const [city, setCity] = useState("");
  const [result, setResult] = useState(null);
  const [error, setError] = useState("");

  const searchByPincode = async () => {
    try {
      const data = await getLocationByPincode(pincode);
      setResult(data);
      setError("");
    } catch (err) {
      setError(err.message);
      setResult(null);
    }
  };

  const searchByCity = async () => {
    try {
      const data = await getPincodesByCity(city);
      setResult(data);
      setError("");
    } catch (err) {
      setError(err.message);
      setResult(null);
    }
  };

  return (
    <div style={{ padding: "20px", fontFamily: "Arial" }}>
      <h2>Location Search</h2>

      <div>
        <input
          type="number"
          placeholder="Enter Pincode"
          value={pincode}
          onChange={(e) => setPincode(e.target.value)}
        />
        <button onClick={searchByPincode}>Search by Pincode</button>
      </div>

      <div style={{ marginTop: "15px" }}>
        <input
          type="text"
          placeholder="Enter City"
          value={city}
          onChange={(e) => setCity(e.target.value)}
        />
        <button onClick={searchByCity}>Search by City</button>
      </div>

      {error && <p style={{ color: "red" }}>{error}</p>}

      {result && (
        <pre style={{ marginTop: "20px", background: "#f4f4f4", padding: "10px" }}>
          {JSON.stringify(result, null, 2)}
        </pre>
      )}
    </div>
  );
}

3. App.js
import React from "react";
import LocationSearch from "./LocationSearch";

function App() {
  return (
    <div>
      <LocationSearch />
    </div>
  );
}

export default App;






// src/services/numberService.js
import axios from "axios";

const API_URL = "http://localhost:8080/api/numbers";

export async function checkMultipleOfFive(num) {
  try {
    const response = await axios.get(`${API_URL}/${num}`, {
      responseType: "text", // ensures backend text response is handled correctly
    });

    return {
      status: response.status,
      message: response.data,
    };
  } catch (error) {
    return {
      status: error.response ? error.response.status : null,
      message: error.response ? error.response.data : "Error connecting to server",
    };
  }
}

CREATE TABLE locations (
    pincode BIGINT PRIMARY KEY,
    city VARCHAR(100) NOT NULL,
    area VARCHAR(100) NOT NULL
);





















react router:



App.js
import React, { useState } from "react";
import { Routes, Route } from "react-router-dom";
import Navbar from "./components/Navbar";
import Home from "./components/Home";
import About from "./components/About";
import CustomerList from "./components/CustomerList";
import CustomerForm from "./components/CustomerForm";
import CustomerDetails from "./components/CustomerDetails";
import { initialCustomers } from "./data/mockData";

export default function App() {
  const [customers, setCustomers] = useState(initialCustomers);

  const addCustomer = (customer) => {
    setCustomers([...customers, { ...customer, id: Date.now() }]);
  };

  const updateCustomer = (updatedCustomer) => {
    setCustomers(
      customers.map((c) => (c.id === updatedCustomer.id ? updatedCustomer : c))
    );
  };

  const deleteCustomer = (id) => {
    if (window.confirm("Are you sure you want to delete this customer?")) {
      setCustomers(customers.filter((c) => c.id !== id));
    }
  };

  return (
    <div>
      <Navbar />
      <div className="container">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/about" element={<About />} />
          <Route
            path="/customers"
            element={<CustomerList customers={customers} onDelete={deleteCustomer} />}
          />
          <Route
            path="/customers/new"
            element={<CustomerForm onSave={addCustomer} />}
          />
          <Route
            path="/customers/edit/:id"
            element={<CustomerForm customers={customers} onSave={updateCustomer} />}
          />
          <Route
            path="/customers/:id"
            element={<CustomerDetails customers={customers} />}
          />
        </Routes>
      </div>
    </div>
  );
}

components/Navbar.js
import React from "react";
import { Link } from "react-router-dom";

export default function Navbar() {
  return (
    <nav className="navbar">
      <div className="navbar-brand">TopGuns Bank</div>
      <ul className="nav-links">
        <li><Link to="/">Home</Link></li>
        <li><Link to="/customers">Customers</Link></li>
        <li><Link to="/about">About</Link></li>
        <li><Link to="/">SCB</Link></li>
      </ul>
    </nav>
  );
}

components/Home.js
import React from "react";

export default function Home() {
  return (
    <div>
      <h2>Welcome to TopGuns Bank</h2>
      <p>This app helps admins manage customers and their account details.</p>
    </div>
  );
}

components/About.js
import React from "react";

export default function About() {
  return (
    <div>
      <h2>About TopGuns Bank</h2>
      <p>
        TopGuns Bank is committed to providing financial services to all.
        This app helps the bank manage customer data and accounts efficiently.
      </p>
    </div>
  );
}

components/CustomerList.js
import React from "react";
import { Link } from "react-router-dom";

export default function CustomerList({ customers, onDelete }) {
  return (
    <div>
      <h2>Customers List</h2>
      <Link to="/customers/new" className="btn">Create new customer</Link>
      <table>
        <thead>
          <tr>
            <th>Id</th><th>First Name</th><th>Last Name</th>
            <th>Email</th><th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {customers.map((c) => (
            <tr key={c.id}>
              <td>{c.id}</td>
              <td>{c.firstName}</td>
              <td>{c.lastName}</td>
              <td>{c.email}</td>
              <td>
                <Link to={`/customers/${c.id}`}>Show</Link> |{" "}
                <Link to={`/customers/edit/${c.id}`}>Edit</Link> |{" "}
                <button onClick={() => onDelete(c.id)} className="link-btn">Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

components/CustomerForm.js
import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";

export default function CustomerForm({ customers = [], onSave }) {
  const { id } = useParams();
  const navigate = useNavigate();

  const existingCustomer = customers.find((c) => c.id === parseInt(id));
  const [form, setForm] = useState(
    existingCustomer || { firstName: "", lastName: "", email: "", phone: "" }
  );

  useEffect(() => {
    if (existingCustomer) setForm(existingCustomer);
  }, [existingCustomer]);

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!form.firstName || !form.lastName || !form.email) {
      alert("Please fill all required fields!");
      return;
    }
    if (id) {
      onSave({ ...form, id: parseInt(id) });
    } else {
      onSave(form);
    }
    navigate("/customers");
  };

  return (
    <div>
      <h2>{id ? "Edit Customer" : "Add Customer"}</h2>
      <form onSubmit={handleSubmit}>
        <input name="firstName" placeholder="First Name" value={form.firstName} onChange={handleChange} />
        <input name="lastName" placeholder="Last Name" value={form.lastName} onChange={handleChange} />
        <input name="email" placeholder="Email" value={form.email} onChange={handleChange} />
        <input name="phone" placeholder="Phone" value={form.phone} onChange={handleChange} />
        <button type="submit" className="btn">{id ? "Update" : "Create"} Customer</button>
      </form>
      <button className="btn" onClick={() => navigate("/customers")}>Back to List</button>
    </div>
  );
}

components/CustomerDetails.js
import React from "react";
import { useParams, useNavigate } from "react-router-dom";

export default function CustomerDetails({ customers }) {
  const { id } = useParams();
  const navigate = useNavigate();

  const customer = customers.find((c) => c.id === parseInt(id));

  if (!customer) return <p>Customer not found</p>;

  return (
    <div>
      <button className="btn" onClick={() => navigate("/customers")}>
        &lt; Back to Customers List
      </button>
      <h2>Customer Details</h2>
      <p><strong>ID:</strong> {customer.id}</p>
      <p><strong>First Name:</strong> {customer.firstName}</p>
      <p><strong>Last Name:</strong> {customer.lastName}</p>
      <p><strong>Email:</strong> {customer.email}</p>
      <p><strong>Phone:</strong> {customer.phone}</p>

      <h3>List of Accounts</h3>
      <table>
        <thead>
          <tr><th>Account No</th><th>Type</th><th>Branch</th><th>Balance</th></tr>
        </thead>
        <tbody>
          {customer.accounts?.map((acc, i) => (
            <tr key={i}>
              <td>{acc.no}</td>
              <td>{acc.type}</td>
              <td>{acc.branch}</td>
              <td>{acc.balance}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

data/mockData.js
export const initialCustomers = [
  {
    id: 1,
    firstName: "Sundar",
    lastName: "Pichai",
    email: "sundar.pichai@google.com",
    phone: "",
    accounts: [
      { no: "1001999", type: "SAVINGS_ACCOUNT", branch: "Bellandur", balance: 1000 },
      { no: "1001888", type: "SAVINGS_ACCOUNT", branch: "Indira Nagar", balance: 2000 },
    ],
  },
  {
    id: 2,
    firstName: "Jeff",
    lastName: "Bezos",
    email: "jeff.bezos@amazon.com",
    phone: "",
    accounts: [{ no: "1002000", type: "CURRENT_ACCOUNT", branch: "Whitefield", balance: 5000 }],
  },
];

App.css
body {
  font-family: Arial, sans-serif;
  margin: 0;
  background: #f9f9f9;
}

.container {
  padding: 20px;
}

.navbar {
  background: #222;
  color: white;
  padding: 10px 20px;
  display: flex;
  justify-content: space-between;
}

.nav-links {
  list-style: none;
  display: flex;
  gap: 15px;
}

.nav-links li a {
  color: white;
  text-decoration: none;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 15px;
  background: white;
}

th, td {
  border: 1px solid #ddd;
  padding: 10px;
}

th {
  background: #eee;
}

.btn {
  padding: 6px 12px;
  margin: 5px;
  background: #007bff;
  border: none;
  color: white;
  cursor: pointer;
}

.btn:hover {
  background: #0056b3;
}

.link-btn {
  background: none;
  border: none;
  color: blue;
  cursor: pointer;
  text-decoration: underline;
}

import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import App from "./App";
import "./App.css";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);





INSERT INTO locations (pincode, city, area) VALUES
(560001, 'Bangalore', 'MG Road'),
(560037, 'Bangalore', 'Marathahalli'),
(500081, 'Hyderabad', 'HITEC City'),
(500072, 'Hyderabad', 'Kukatpally'),
(110001, 'New Delhi', 'Connaught Place'),
(400001, 'Mumbai', 'Fort'),
(400050, 'Mumbai', 'Bandra'),
(600028, 'Chennai', 'Mylapore'),
(600100, 'Chennai', 'Velachery');





spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true

spring.sql.init.mode=always
spring.datasource.initialization-mode=always

