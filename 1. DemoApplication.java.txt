
1. DemoApplication.java
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }
}

2. NumberController.java
package com.example.demo.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/numbers")
public class NumberController {

    @GetMapping("/{num}")
    public ResponseEntity<String> checkMultipleOfFive(@PathVariable int num) {
        if (num % 5 == 0) {
            return ResponseEntity
                    .status(HttpStatus.OK)
                    .body("Yes, " + num + " is a multiple of 5");
        } else {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body("No, " + num + " is not a multiple of 5");
        }
    }
}


âœ… Run this with mvn spring-boot:run â†’ server will start on http://localhost:8080.

ðŸŸ¡ React Frontend

Letâ€™s make a simple component that lets the user enter a number, calls the API, and displays the result.

CheckNumber.js
import React, { useState } from "react";

export default function CheckNumber() {
  const [num, setNum] = useState("");
  const [message, setMessage] = useState("");
  const [status, setStatus] = useState(null);

  const checkNumber = async () => {
    if (!num) return;
    try {
      const response = await fetch(`http://localhost:8080/api/numbers/${num}`);
      const text = await response.text();
      setMessage(text);
      setStatus(response.status);
    } catch (err) {
      setMessage("Error connecting to server");
      setStatus(null);
    }
  };

  return (
    <div style={{ padding: "20px", fontFamily: "Arial" }}>
      <h2>Check Multiple of 5</h2>
      <input
        type="number"
        value={num}
        onChange={(e) => setNum(e.target.value)}
        placeholder="Enter a number"
      />
      <button onClick={checkNumber} style={{ marginLeft: "10px" }}>
        Check
      </button>
      {message && (
        <p style={{ marginTop: "15px", color: status === 200 ? "green" : "red" }}>
          {message} (HTTP {status})
        </p>
      )}
    </div>
  );
}

Usage in React App

In your App.js:

import React from "react";
import CheckNumber from "./CheckNumber";

function App() {
  return (
    <div>
      <CheckNumber />
    </div>
  );
}


export default App;


















// src/services/numberService.js

const API_URL = "http://localhost:8080/api/numbers";

export async function checkMultipleOfFive(num) {
  try {
    const response = await fetch(`${API_URL}/${num}`);
    const text = await response.text();
    return {
      status: response.status,
      message: text
    };
  } catch (error) {
    return {
      status: null,
      message: "Error connecting to server"
    };
  }
}





// src/CheckNumber.js
import React, { useState } from "react";
import { checkMultipleOfFive } from "./services/numberService";

export default function CheckNumber() {
  const [num, setNum] = useState("");
  const [result, setResult] = useState(null);

  const handleCheck = async () => {
    if (!num) return;
    const res = await checkMultipleOfFive(num);
    setResult(res);
  };

  return (
    <div style={{ padding: "20px", fontFamily: "Arial" }}>
      <h2>Check Multiple of 5</h2>
      <input
        type="number"
        value={num}
        onChange={(e) => setNum(e.target.value)}
        placeholder="Enter a number"
      />
      <button onClick={handleCheck} style={{ marginLeft: "10px" }}>
        Check
      </button>

      {result && (
        <p
          style={{
            marginTop: "15px",
            color: result.status === 200 ? "green" : "red"
          }}
        >
          {result.message} (HTTP {result.status})
        </p>
      )}
    </div>
  );
}




import React from "react";
import CheckNumber from "./CheckNumber";

function App() {
  return <CheckNumber />;
}

export default App;





























1. application.properties
spring.datasource.url=jdbc:postgresql://localhost:5432/locationsdb
spring.datasource.username=postgres
spring.datasource.password=yourpassword
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

2. Location.java
package com.example.demo.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "locations")
public class Location {

    @Id
    private Long pincode;   // Primary key
    private String city;
    private String area;

    public Location() {}

    public Location(Long pincode, String city, String area) {
        this.pincode = pincode;
        this.city = city;
        this.area = area;
    }

    public Long getPincode() { return pincode; }
    public void setPincode(Long pincode) { this.pincode = pincode; }

    public String getCity() { return city; }
    public void setCity(String city) { this.city = city; }

    public String getArea() { return area; }
    public void setArea(String area) { this.area = area; }
}

3. LocationRepository.java
package com.example.demo.repository;

import com.example.demo.entity.Location;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface LocationRepository extends JpaRepository<Location, Long> {
    List<Location> findByCityIgnoreCase(String city);
}

4. LocationService.java
package com.example.demo.service;

import com.example.demo.entity.Location;
import com.example.demo.repository.LocationRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class LocationService {

    private final LocationRepository repo;

    public LocationService(LocationRepository repo) {
        this.repo = repo;
    }

    public Optional<Location> getLocationByPincode(Long pincode) {
        return repo.findById(pincode);
    }

    public List<Location> getPincodesByCity(String city) {
        return repo.findByCityIgnoreCase(city);
    }
}

5. LocationController.java
package com.example.demo.controller;

import com.example.demo.entity.Location;
import com.example.demo.service.LocationService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/locations")
@CrossOrigin(origins = "http://localhost:3000")
public class LocationController {

    private final LocationService service;

    public LocationController(LocationService service) {
        this.service = service;
    }

    // Get info about city, area, pincode by specifying pincode
    @GetMapping("/pincode/{pincode}")
    public ResponseEntity<?> getLocationByPincode(@PathVariable Long pincode) {
        return service.getLocationByPincode(pincode)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    // Get all pincodes associated with a city
    @GetMapping("/city/{city}")
    public ResponseEntity<List<Location>> getPincodesByCity(@PathVariable String city) {
        return ResponseEntity.ok(service.getPincodesByCity(city));
    }
}

ðŸŸ¡ React Frontend
Project Structure
react-location/
 â””â”€â”€ src/
     â”œâ”€â”€ services/locationService.js
     â”œâ”€â”€ LocationSearch.js
     â”œâ”€â”€ App.js
     â””â”€â”€ index.js

1. locationService.js
const API_URL = "http://localhost:8080/api/locations";

export async function getLocationByPincode(pincode) {
  const res = await fetch(`${API_URL}/pincode/${pincode}`);
  if (!res.ok) throw new Error("Pincode not found");
  return res.json();
}

export async function getPincodesByCity(city) {
  const res = await fetch(`${API_URL}/city/${city}`);
  if (!res.ok) throw new Error("City not found");
  return res.json();
}

2. LocationSearch.js
import React, { useState } from "react";
import { getLocationByPincode, getPincodesByCity } from "./services/locationService";

export default function LocationSearch() {
  const [pincode, setPincode] = useState("");
  const [city, setCity] = useState("");
  const [result, setResult] = useState(null);
  const [error, setError] = useState("");

  const searchByPincode = async () => {
    try {
      const data = await getLocationByPincode(pincode);
      setResult(data);
      setError("");
    } catch (err) {
      setError(err.message);
      setResult(null);
    }
  };

  const searchByCity = async () => {
    try {
      const data = await getPincodesByCity(city);
      setResult(data);
      setError("");
    } catch (err) {
      setError(err.message);
      setResult(null);
    }
  };

  return (
    <div style={{ padding: "20px", fontFamily: "Arial" }}>
      <h2>Location Search</h2>

      <div>
        <input
          type="number"
          placeholder="Enter Pincode"
          value={pincode}
          onChange={(e) => setPincode(e.target.value)}
        />
        <button onClick={searchByPincode}>Search by Pincode</button>
      </div>

      <div style={{ marginTop: "15px" }}>
        <input
          type="text"
          placeholder="Enter City"
          value={city}
          onChange={(e) => setCity(e.target.value)}
        />
        <button onClick={searchByCity}>Search by City</button>
      </div>

      {error && <p style={{ color: "red" }}>{error}</p>}

      {result && (
        <pre style={{ marginTop: "20px", background: "#f4f4f4", padding: "10px" }}>
          {JSON.stringify(result, null, 2)}
        </pre>
      )}
    </div>
  );
}

3. App.js
import React from "react";
import LocationSearch from "./LocationSearch";

function App() {
  return (
    <div>
      <LocationSearch />
    </div>
  );
}

export default App;
